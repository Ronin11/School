package io;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

import object.ObjectShape;

import org.w3c.dom.Node;
import org.w3c.dom.Element;


public class XML {
	
	public XML(){}
	
	public static void saveFile(File file, List<ObjectShape> shapes){
		try{
			if(!file.getName().endsWith(".xml"))
				file.getName() += ".xml";
			file.fil
			DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
			Document doc = docBuilder.newDocument();
			Element list = doc.createElement("Elements");
			doc.appendChild(list);
			
			for(ObjectShape shape : shapes)
				list.appendChild(shape.toXML(doc));
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(doc);
			if(file.getName().endsWith(".xml"))
				StreamResult result = new StreamResult(file);

			transformer.transform(source, result);
	  } catch (TransformerException tfe) {
		tfe.printStackTrace();
	  } catch (ParserConfigurationException e) {
		e.printStackTrace();
	  }
	}
	
	public void readObjects(ArrayList<ObjectShape> list){
		
	try {
		File fXmlFile = new File("XML.xml");
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		Document doc = dBuilder.parse(fXmlFile);

		doc.getDocumentElement().normalize();
			
		NodeList nList = doc.getElementsByTagName("shape");

		for (int temp = 0; temp < nList.getLength(); temp++) {

			Node nNode = nList.item(temp);
						
			if (nNode.getNodeType() == Node.ELEMENT_NODE) {

				Element eElement = (Element) nNode;
				
				String name = eElement.getAttribute("name");
				switch(name){
				case "Circle":
		        	list.add(new Circle(Double.parseDouble(eElement.getElementsByTagName("Radius").item(0).getTextContent())));
		        	break;
		        case "Ellipse":
		        	list.add(new Ellipse(Double.parseDouble(eElement.getElementsByTagName("Radius").item(0).getTextContent()),
		        			Double.parseDouble(eElement.getElementsByTagName("OtherRadius").item(0).getTextContent())));
		        	break;
		        case "Triangle":
		        	list.add(new Triangle(Double.parseDouble(eElement.getElementsByTagName("Width").item(0).getTextContent()),
		        			Double.parseDouble(eElement.getElementsByTagName("Height").item(0).getTextContent())));
		        	break;
		        case "ScaleneTriangle":
		        	list.add(new ScaleneTriangle(Double.parseDouble(eElement.getElementsByTagName("Width").item(0).getTextContent()),
		        			Double.parseDouble(eElement.getElementsByTagName("Height").item(0).getTextContent()),
		        			Double.parseDouble(eElement.getElementsByTagName("Length").item(0).getTextContent())));
		        	break;
		        case "Square":
		        	list.add(new Square(Double.parseDouble(eElement.getElementsByTagName("Width").item(0).getTextContent())));
		        	break;
		        case "Rectangle":
		        	list.add(new Rectangle(Double.parseDouble(eElement.getElementsByTagName("Width").item(0).getTextContent()),
		        			Double.parseDouble(eElement.getElementsByTagName("Height").item(0).getTextContent())));
		        	break;
				}
			}
		}
	    } catch (Exception e) {
		e.printStackTrace();
	    }
	  }
	
	public static void generate(){
		try {

			DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
			Document doc = docBuilder.newDocument();
			Element list = doc.createElement("List");
			doc.appendChild(list);
			Random random = new Random();
			
			for(int i = -1; i < random.nextInt(10); i++){
				Element shape = doc.createElement("shape");
				list.appendChild(shape);
				shape.setAttribute("name", "Circle");
	
				Element radius = doc.createElement("Radius");
				radius.appendChild(doc.createTextNode(Integer.toString(random.nextInt(20))));
				shape.appendChild(radius);
			}
			
			for(int i = -1; i < random.nextInt(10); i++){
				Element shape = doc.createElement("shape");
				list.appendChild(shape);
				
				shape.setAttribute("name", "Ellipse");

				Element radius = doc.createElement("Radius");
				radius.appendChild(doc.createTextNode(Integer.toString(random.nextInt(20))));
				shape.appendChild(radius);
				Element otherRadius = doc.createElement("OtherRadius");
				otherRadius.appendChild(doc.createTextNode(Integer.toString(random.nextInt(20))));
				shape.appendChild(otherRadius);
			}
			
			for(int i = -1; i < random.nextInt(10); i++){
				Element shape = doc.createElement("shape");
				list.appendChild(shape);
				
				shape.setAttribute("name", "Square");

				Element width = doc.createElement("Width");
				width.appendChild(doc.createTextNode(Integer.toString(random.nextInt(20))));
				shape.appendChild(width);
			}
			
			for(int i = -1; i < random.nextInt(10); i++){
				Element shape = doc.createElement("shape");
				list.appendChild(shape);
		
				shape.setAttribute("name", "Rectangle");

				Element width = doc.createElement("Width");
				width.appendChild(doc.createTextNode(Integer.toString(random.nextInt(20))));
				shape.appendChild(width);
				
				Element height = doc.createElement("Height");
				height.appendChild(doc.createTextNode(Integer.toString(random.nextInt(20))));
				shape.appendChild(height);
			}
			
			for(int i = -1; i < random.nextInt(10); i++){
				Element shape = doc.createElement("shape");
				list.appendChild(shape);
		
				shape.setAttribute("name", "Triangle");

				Element width = doc.createElement("Width");
				width.appendChild(doc.createTextNode(Integer.toString(random.nextInt(20))));
				shape.appendChild(width);
				
				Element height = doc.createElement("Height");
				height.appendChild(doc.createTextNode(Integer.toString(random.nextInt(20))));
				shape.appendChild(height);
			}
			
			for(int i = -1; i < random.nextInt(10); i++){
				Element shape = doc.createElement("shape");
				list.appendChild(shape);
				
				shape.setAttribute("name", "ScaleneTriangle");

				Element width = doc.createElement("Width");
				width.appendChild(doc.createTextNode(Integer.toString(3)));
				shape.appendChild(width);
				
				Element height = doc.createElement("Height");
				height.appendChild(doc.createTextNode(Integer.toString(6)));
				shape.appendChild(height);
				
				Element length = doc.createElement("Length");
				length.appendChild(doc.createTextNode(Integer.toString(7)));
				shape.appendChild(length);
			}

			// write the content into xml file
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(new File("XML.xml"));

			// Output to console for testing
			//StreamResult result = new StreamResult(System.out);

			transformer.transform(source, result);

		  } catch (ParserConfigurationException pce) {
			pce.printStackTrace();
		  } catch (TransformerException tfe) {
			tfe.printStackTrace();
		  }
	}
}
