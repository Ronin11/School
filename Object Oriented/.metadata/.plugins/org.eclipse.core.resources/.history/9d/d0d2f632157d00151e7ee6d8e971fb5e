package gui;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

import command.CreateCommand;
import command.Invoker;
import gui.GUI.Mode;
import object.ObjectShape;
import object.ShapeFactory;

public class DrawingCanvas extends Canvas{
	Graphics2D g2;
	ObjectShape currentShape = ShapeFactory.makeHeart();
	Color currentColor = Color.red;
	Mode currentMode;
	Invoker invoker = new Invoker();
	DrawingCanvas pointer;
	ArrayList<ObjectShape> shapes = new ArrayList<ObjectShape>();
	final static int canvasSize = 300;
	
	public DrawingCanvas(){
		invoker.start();
		pointer = this;
		setBackground(Color.white);
		setSize(canvasSize,canvasSize);
		currentMode = Mode.CREATE;
		this.addMouseListener(new MouseAdapter(){
			@Override
			public void mousePressed(MouseEvent e){
				switch (currentMode){
					case CREATE:
						currentShape.setVals(e.getX(), e.getY(), currentColor);
						invoker.addCommand(new CreateCommand(currentShape, pointer));
						break;
					case SELECT:
						
						break;
					case DELETE:
						break;
					case DUPLICATE:
						break;
					case MOVE:
						break;
					case CHANGECOLOR:
						break;
					default:
					System.out.println("BAD STUFF");
					break;
				}	
			}
		});
	}
	public void paint (Graphics g){
		g2 = (Graphics2D) g;
		requestFocus();
	}
	public void update(Graphics g){
		g2 = (Graphics2D) g;
		//g.setColor(getBackground());
		//g.clearRect(0, 0, canvasSize, canvasSize);
		for(ObjectShape shape : shapes)
			shape.draw(g2);
		requestFocus();
	}
	public void addShape(ObjectShape shape){
		shapes.add(shape);
		shape.draw(this.getGraphics());
		repaint();
	}
	public boolean removeShape(ObjectShape shape){
		boolean temp = shapes.remove(shape);
		repaint();
		return temp;
	}
	public void setMode(Mode mode){
		currentMode = mode;
		System.out.println(currentMode);
	}
	public void setCurrentShape(ObjectShape shape){
		currentShape = shape;
	}
	public void selectShape(ObjectShape shape){
		for(ObjectShape temp : shapes){
			if(temp == shape){
				shapes.remove(temp);
				shapes.add(0, temp);
			}
		}
	}
	public Color getCurrentColor(){return color;}
	public void setCurrentColor(Color color){this.color = color;}
}