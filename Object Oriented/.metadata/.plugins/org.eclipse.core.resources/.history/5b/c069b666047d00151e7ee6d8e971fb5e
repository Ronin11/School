package gui;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

import command.CreateCommand;
import command.Invoker;
import gui.GUI.Mode;
import object.Shape;
import object.ShapeFactory;

public class DrawingCanvas extends Canvas{
	Graphics2D g2;
	private Shape currentShape;
	Mode currentMode;
	Invoker invoker = new Invoker();
	DrawingCanvas pointer;
	ArrayList<Shape> shapes = new ArrayList<Shape>();
	final static int canvasSize = 300;
	
	public DrawingCanvas(){
		invoker.run();
		pointer = this;
		setBackground(Color.white);
		setSize(canvasSize,canvasSize);
		currentMode = Mode.CREATE;
		this.addMouseListener(new MouseAdapter(){
			@Override
			public void mousePressed(MouseEvent e){
				switch (currentMode){
				case CREATE:
					invoker.addCommand(new CreateCommand(currentShape, pointer));
					break;
				case SELECT:
					break;
				case DELETE:
					break;
				case DUPLICATE:
					break;
				case MOVE:
					break;
				case RESIZE:
					break;
				default:
					System.out.println("BAD STUFF");
					break;
				}
				repaint();	
			}
		});
	}
	public void paint (Graphics g){
		g2 = (Graphics2D) g;
		requestFocus();
	}
	public void update(Graphics g){
		g2 = (Graphics2D) g;
		g.setColor(getBackground());
		g.clearRect(0, 0, canvasSize, canvasSize);
		for(Shape shape : shapes)
			shape.draw(g);
		requestFocus();
	}
	public void addShape(Shape shape){
		shapes.add(shape);
	}
	public boolean removeShape(Shape shape){
		return shapes.remove(shape);
	}
}