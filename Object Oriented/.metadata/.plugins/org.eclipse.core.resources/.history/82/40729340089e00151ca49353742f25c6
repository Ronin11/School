package io;

import java.io.File;
import java.util.ArrayList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import engineer.Engineer;
import task.Task;

public class XML {
	
	private static void recursiveWriteXML(Task t, Document doc, Element parent){
		Element task = doc.createElement("Task");
		task.setAttribute("isSequential", Boolean.toString(t.getIsSequential()));
		task.setAttribute("id", Integer.toString(t.getId()));
		parent.appendChild(task);
		
		Element label = doc.createElement("Label");
		label.appendChild(doc.createTextNode(t.getLabel()));
		task.appendChild(label);
		
		Element description = doc.createElement("Description");
		description.appendChild(doc.createTextNode(t.getDescription()));
		task.appendChild(description);
		
		Element engineers = doc.createElement("AssignedEngineers");
		engineers.appendChild(doc.createTextNode(t.getAssignedEngineers().toString()));
		task.appendChild(engineers);
		
		Element estimates = doc.createElement("Estimates");
		estimates.setAttribute("originalEstimatedHours", Float.toString(t.getOriginalEstimatedHours()));
		estimates.setAttribute("revisedEstimatedHours", Float.toString(t.getRevisedEstimatedHours()));
		estimates.setAttribute("percentComplete", Float.toString(t.getPercentComplete()));
		estimates.setAttribute("estimatedRemainingHours", Float.toString(t.getEstimatedRemainingHours()));
		estimates.setAttribute("estimatedRemainingWorkdays", Float.toString(t.getEstimatedRemainingWorkdays()));
		task.appendChild(estimates);
		
		Element subtasks = doc.createElement("Subtasks");
		task.appendChild(subtasks);
		for(Task sub : t.getSubtasks())
			recursiveWriteXML(sub, doc, subtasks);
	}	
	
	public static void exportTasks(Task t, File outputFile){
		try {
			DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
			Document doc = docBuilder.newDocument();
			Element list = doc.createElement("WBA");
			doc.appendChild(list);
			
			recursiveWriteXML(t, doc, list);

			// write the content into xml file
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(outputFile);

			transformer.transform(source, result);

		  } catch (ParserConfigurationException pce) {
			pce.printStackTrace();
		  } catch (TransformerException tfe) {
			tfe.printStackTrace();
		  }
	}
	
	private static void recursiveReadXML(Task t, Document doc, Element parent){
		
	}
	
	public static Task importTasks(File file){
		try {
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(file);
						
			//optional, but recommended
			//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
			doc.getDocumentElement().normalize();
				
			NodeList nList = doc.getElementsByTagName("WBA");

			
			for (int temp = 0; temp < nList.getLength(); temp++) {

				Node nNode = nList.item(temp);
				
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {

					Element eElement = (Element) nNode;
					NodeList chile = eElement.getChildNodes();
					
					String name = eElement.getAttribute("name");
					switch(name){
					case "Task":
						/*
			        	list.add(new ScaleneTriangle(Double.parseDouble(eElement.getElementsByTagName("Width").item(0).getTextContent()),
			        			Double.parseDouble(eElement.getElementsByTagName("Height").item(0).getTextContent()),
			        			Double.parseDouble(eElement.getElementsByTagName("Length").item(0).getTextContent())));
			        	*/
			        	break;
					}
				}
			}
		    } catch (Exception e) {
			e.printStackTrace();
		    }
		return null;
	}
}
