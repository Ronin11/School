package test;

import static org.junit.Assert.*;

import java.io.File;

import org.junit.Test;

import engineer.Engineer;
import io.XML;
import task.Task;

public class Tests {

	@Test
	public void testSave(){
		try{
			Engineer e = new Engineer();
			e.setName("steve");
			e.setHours(8);
			
			Task t = Task.Builder.buildParallelTask();
			t.addEngineerToTask(e);
			t.setDescription("description");
			t.setLabel("label");
			t.addSubtask(Task.Builder.buildLeafTask());
			t.getSubtasks().get(0).addSubtask(Task.Builder.buildLeafTask());
			XML.exportTasks(t, new File("test.xml"));
		}
		catch(Exception e){
		   fail("Should not have thrown any exception");
		}
	}
	
	@Test
	public void testLoad(){
		Task masterTask = XML.importTasks(new File("test.xml"));
		assertTrue(masterTask != null);
	}
	
	@Test
	public void testClasses(){
		Engineer e = new Engineer();
		e.setName("steve");
		e.setHours(8);
		Engineer e2 = new Engineer();
		e2.setName("steve");
		e2.setHours(8);
		
		assertTrue(e.getId() != e2.getId());
		
		Task t = Task.Builder.buildParallelTask();
		t.addEngineerToTask(e);
		assertTrue(t.getAssignedEngineers().contains(e));
		t.removeEngineerFromoTask(e);
		assertFalse(t.getAssignedEngineers().contains(e));
		
		t.setDescription("description");
		assertFalse(t.getDescription().equals(""));
		t.setLabel("label");
		assertFalse(t.getLabel().equals(""));
		
		t.addSubtask(Task.Builder.buildLeafTask());
		t.getSubtasks().get(0).addSubtask(Task.Builder.buildLeafTask());
		
		assertTrue(t.getSubtasks().size() == 1);
		assertTrue(t.getSubtasks().get(0).getSubtasks().size() == 1);
		
		t.getSubtasks().get(0).getSubtasks().get(0).setEstimatedRemainingHours(1);
		t.getSubtasks().get(0).getSubtasks().get(0).setEstimatedRemainingWorkdays(2);
		t.getSubtasks().get(0).getSubtasks().get(0).setOriginalEstimatedHours(3);
		t.getSubtasks().get(0).getSubtasks().get(0).setPercentComplete(4);
		t.getSubtasks().get(0).getSubtasks().get(0).setRevisedEstimatedHours(5);
		
		assertTrue(t.getEstimatedRemainingHours() == 1);
		assertTrue(t.getEstimatedRemainingWorkdays() == 2);
		assertTrue(t.getOriginalEstimatedHours() == 3);
		assertTrue(t.getPercentComplete() == 4);
		assertTrue(t.getRevisedEstimatedHours() == 5);
		
		
		Task task = Task.Builder.buildSequentialTask();
		task.addEngineerToTask(e);
		assertTrue(task.getAssignedEngineers().contains(e));
		task.removeEngineerFromoTask(e);
		assertFalse(task.getAssignedEngineers().contains(e));
		
		task.setDescription("description");
		assertFalse(task.getDescription().equals(""));
		task.setLabel("label");
		assertFalse(task.getLabel().equals(""));
		
		task.addSubtask(Task.Builder.buildLeafTask());
		task.getSubtasks().get(0).addSubtask(Task.Builder.buildLeafTask());
		
		assertTrue(task.getSubtasks().size() == 1);
		assertTrue(task.getSubtasks().get(0).getSubtasks().size() == 1);
		
		task.getSubtasks().get(0).getSubtasks().get(0).setEstimatedRemainingHours(1);
		task.getSubtasks().get(0).getSubtasks().get(0).setEstimatedRemainingWorkdays(2);
		task.getSubtasks().get(0).getSubtasks().get(0).setOriginalEstimatedHours(3);
		task.getSubtasks().get(0).getSubtasks().get(0).setPercentComplete(4);
		task.getSubtasks().get(0).getSubtasks().get(0).setRevisedEstimatedHours(5);
		
		assertTrue(task.getEstimatedRemainingHours() == 1);
		assertTrue(task.getEstimatedRemainingWorkdays() == 2);
		assertTrue(task.getOriginalEstimatedHours() == 3);
		assertTrue(task.getPercentComplete() == 4);
		assertTrue(task.getRevisedEstimatedHours() == 5);
	}
}
