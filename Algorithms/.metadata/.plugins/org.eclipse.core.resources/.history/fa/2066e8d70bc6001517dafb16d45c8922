package test;

import static org.junit.Assert.*;

import java.io.PrintWriter;
import java.util.Random;

import org.junit.Test;

import algos.*;

public class Tester {
	long startTime = 0;
	long endTime = 0;
	
	@Test
	public void firstTest(){
		PrintWriter writer = null;
		for(int i = 0; i < 100; i++){
			Random rand = new Random();
			int a = rand.nextInt(5);
			int b = rand.nextInt(5);
			int c = rand.nextInt(5);
			Algo algo1 = new Recursive();
			Algo algo2 = new RecursiveMemoized(a, b, c);
			Algo algo3 = new DynamicProgramming(a, b, c);
			
			
			startTime = System.nanoTime();
			boolean one = algo1.win(a, b, c);
			endTime = System.nanoTime();
			long duration1 = (endTime - startTime)/1000000;
			writer.write(String.valueOf(duration1));
			
			startTime = System.nanoTime();
			boolean two = algo2.win(a, b, c);
			endTime = System.nanoTime();
			long duration2 = (endTime - startTime)/1000000;
			
			startTime = System.nanoTime();
			boolean three = algo3.win(a, b, c);
			endTime = System.nanoTime();
			long duration3 = (endTime - startTime)/1000000;
			
			assertTrue(one == two);
			assertTrue(one == three);
		}
	}
	
	@Test
	public void secondTest(){
		for(int i = 0; i < 100; i++){
			Random rand = new Random();
			int a = rand.nextInt(100);
			int b = rand.nextInt(100);
			int c = rand.nextInt(100);
			Algo algo2 = new RecursiveMemoized(a, b, c);
			Algo algo3 = new DynamicProgramming(a, b, c);
			
			startTime = System.nanoTime();
			boolean two = algo2.win(a, b, c);
			endTime = System.nanoTime();
			long duration2 = (endTime - startTime)/1000000;
			
			startTime = System.nanoTime();
			boolean three = algo3.win(a, b, c);
			endTime = System.nanoTime();
			long duration3 = (endTime - startTime)/1000000;
			
			assertTrue(two == three);
		}
	}
}
